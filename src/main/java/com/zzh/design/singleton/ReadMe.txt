作业内容
1、熟练掌握单例模式的常见写法。
2、总结每种单例写法的优、缺点。
3、思考破坏单例模式的方式有哪些？并且归纳总结。
4、梳理内部类的执行逻辑，并画出时序图。

饿汉式单例：1、私有化构造函数 2、定义一个单例对象并初始化（静态代码块或者直接初始化）
 3、公开获去该实例对象方法。
懒汉式单例：
      简单懒汉：缺点，高并发下会出现多实例情况,有漏洞不要使用。
      方法锁懒汉：在方法上加锁，如果方法内部逻辑复杂的话，高并发情况下效率较低
      双重锁检查：在实现单例的情况下，效率较高。（需要添加volatile 关键字，避免指令重拍）
      静态内部类：高效，用静态内部类加载机制，实现无锁情况下的单例。
注册式单例
      注册式单例有两种写法：一种为容器缓存，一种为枚举登记

 破坏单例方式：
 1、反射：原理，反射能够把私有化的构造函数设置成public，从而生成相应实例。可以在构造函数中加判断，如果已经存在单例就抛异常
 2、序列化：当我们将一个单例对象创建好，有时候需要将对象序列化然后写入到磁盘，下次使用时
       再从磁盘中读取到对象，反序列化转化为内存对象。反序列化后的对象会重新分配内存，
       即重新创建。那如果序列化的目标的对象为单例对象，就违背了单例模式
       解决方案：重写 readResolve(),里面直接返回 单例对象

